{"version":3,"sources":["components/Title.tsx","components/Form.tsx","components/Results.tsx","components/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","Form","city","setCity","getWeather","onSubmit","type","name","placeholder","onChange","e","target","value","Results","props","results","cityName","country","temperature","conditionText","icon","className","src","alt","Loading","App","useState","loading","setLoading","setResults","preventDefault","fetch","then","res","json","data","location","current","temp_c","condition","text","catch","err","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAMeA,EAND,WACV,OACI,gDCaOC,EATF,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,WAC1B,OACI,uBAAMC,SAAUD,EAAhB,UACI,uBAAOE,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAAAC,GAAC,OAAIP,EAAQO,EAAEC,OAAOC,QAAQA,MAAOV,IACtG,wBAAQI,KAAK,SAAb,6BCgBGO,EAhBC,SAACC,GACb,MAAgEA,EAAMC,QAA9DC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,YAAaC,EAAxC,EAAwCA,cAAeC,EAAvD,EAAuDA,KACvD,OACI,qCACKJ,GAAY,qBAAKK,UAAU,eAAf,SAA+BL,IAC3CC,GAAW,qBAAKI,UAAU,kBAAf,SAAkCJ,IAC7CC,GAAe,sBAAKG,UAAU,gBAAf,UAAgCH,EAAY,6CAC3DC,GACG,sBAAKE,UAAU,oBAAf,UACI,qBAAKC,IAAKF,EAAMG,IAAI,SACpB,+BAAOJ,WClBZK,EAFC,kBAAM,qBAAKH,UAAU,a,MCqDtBI,MAvCf,WACE,MAA6BC,oBAAkB,GAA/C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoBF,mBAAiB,IAArC,mBAAMxB,EAAN,KAAWC,EAAX,KACA,EAA0BuB,mBAA2B,CACnDT,QAAQ,GACRD,SAAS,GACTE,YAAY,GACZC,cAAc,GACdC,KAAK,KALP,mBAAML,EAAN,KAAcc,EAAd,KAyBA,OACE,qBAAKR,UAAU,UAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAMjB,WAtBK,SAACM,GAChBA,EAAEoB,iBACFF,GAAW,GACXG,MAAM,mFAAD,OAAoF7B,EAApF,YACJ8B,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJN,EAAW,CACTZ,QAAQkB,EAAKC,SAASnB,QACtBD,SAASmB,EAAKC,SAAS7B,KACvBW,YAAYiB,EAAKE,QAAQC,OACzBnB,cAAcgB,EAAKE,QAAQE,UAAUC,KACrCpB,KAAKe,EAAKE,QAAQE,UAAUnB,OAE9BjB,EAAQ,IACRyB,GAAW,MAEZa,OAAM,SAAAC,GAAG,OAAIC,MAAM,4IAMcxC,QAASA,EAASD,KAAMA,IACrDyB,EAAU,cAAC,EAAD,IAAY,cAAC,EAAD,CAASZ,QAASA,UCjClC6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b2aa2c0c.chunk.js","sourcesContent":["const Title = () => {\n    return(\n        <h1>World Weather</h1>\n    );\n};\n\nexport default Title;","type FormPropsType ={\n    city: string;\n    setCity: React.Dispatch<React.SetStateAction<string>>;\n    getWeather: (e: React.FormEvent<HTMLFormElement>) => void;\n}\n\nconst Form = ({city, setCity, getWeather}:FormPropsType) => {\n    return(\n        <form onSubmit={getWeather}>\n            <input type='text' name='city' placeholder='City Name' onChange={e => setCity(e.target.value)} value={city}/>\n            <button type='submit'>Get Weather</button>\n        </form>\n    );\n};\n\nexport default Form;\n\n","type ResultsPropsType = {\n    results:{\n        country:string;\n        cityName:string;\n        temperature:string;\n        conditionText:string;\n        icon:string;\n    }\n}\n\nconst Results = (props:ResultsPropsType) => {\n    const { cityName, country, temperature, conditionText, icon } = props.results;\n    return (\n        <>\n            {cityName && <div className=\"results-city\">{cityName}</div>}\n            {country && <div className=\"results-country\">{country}</div>}\n            {temperature && <div className=\"restults-temp\">{temperature}<span>℃</span></div>}\n            {conditionText && \n                <div className=\"results-condition\">\n                    <img src={icon} alt='icon'/>\n                    <span>{conditionText}</span>\n                </div>}\n        </>\n    );\n};\n\nexport default Results;","const Loading = () => <div className='loading'></div>\n\nexport default Loading;","import {useState} from 'react';\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Results from \"./components/Results\";\nimport Loading from \"./components/Loading\";\nimport './App.css';\n\ntype ResultsStateType = {\n  country:string;\n  cityName:string;\n  temperature:string;\n  conditionText:string;\n  icon:string;\n}\nfunction App() {\n  const [loading,setLoading] = useState<boolean>(false);\n  const[city,setCity]=useState<string>(\"\");\n  const[results,setResults]=useState<ResultsStateType>({\n    country:\"\",\n    cityName:\"\",\n    temperature:\"\",\n    conditionText:\"\",\n    icon:\"\"\n  });\n  const getWeather=(e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoading(true);\n    fetch(`https://api.weatherapi.com/v1/current.json?key=4b8ba9483658487590b33530210812&q=${city}&aqi=no`)\n    .then(res=>res.json())\n    .then(data=>{\n      setResults({\n        country:data.location.country,\n        cityName:data.location.name,\n        temperature:data.current.temp_c,\n        conditionText:data.current.condition.text,\n        icon:data.current.condition.icon\n      })\n      setCity('');\n      setLoading(false);\n    })\n    .catch(err => alert('エラーが発生しました。リロードしてください。'))\n  }\n  return (\n    <div className=\"wrapper\">\n      <div className=\"container\">\n        <Title />\n        <Form getWeather={getWeather} setCity={setCity} city={city} />\n        {loading ? <Loading />:<Results results={results} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}